// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Ticket {
  id       Int      @id @default(autoincrement())
  userId   Int
  issuedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model User {
  id Int @id @default(autoincrement())

  pseudo        String  @unique
  email         String  @unique
  emailVerified Boolean @default(false)

  totpSecret  String?
  totpEnabled Boolean @default(false)

  // The bcrypt password when using email & password login
  password String?

  avatar String? /////////////////////////////////////////////////

  level      Int   @default(0)
  experience Float @default(0)

  friends      Friendship[] @relation("users")
  blocked      Blocked[]    @relation("users")
  befriendedBy Friendship[] @relation("friends")
  bannedBy     Blocked[]    @relation("blocked")

  gameParticipation GameParticipation[]

  userConversations UserConversation[]

  channelMemberships ChannelMembership[]
  ownedChannels      Channel[]

  ftUser  FortyTwoUser?
  tickets Ticket[]

  achievements UserAchievement[]
}

model Friendship {
  status Int @default(0) //0 sender   /1 receiver  /2 accepted /3 blocked

  userId   Int
  friendId Int
  user     User @relation("users", fields: [userId], references: [id])
  friend   User @relation("friends", fields: [friendId], references: [id])

  @@id([userId, friendId])
}

model Blocked {
  userId    Int
  blockedId Int
  user      User @relation("users", fields: [userId], references: [id])
  blocked   User @relation("blocked", fields: [blockedId], references: [id])

  @@id([userId, blockedId])
}

model GameParticipation {
  opponentId Int

  userId Int
  gameId Int
  user   User @relation(fields: [userId], references: [id])
  game   Game @relation(fields: [gameId], references: [id])

  @@id([userId, gameId])
}

model Game {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  score1             Int
  score2             Int
  winnerId           Int
  looserId           Int
  gameParticipations GameParticipation[]
}

model UserConversation {
  receiverId Int

  userId         Int
  conversationId Int
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@id([userId, conversationId])
}

model Conversation {
  id Int @id @default(autoincrement())

  name     String             @unique
  messages PrivateMessage[]
  users    UserConversation[]
}

model PrivateMessage {
  id Int @id @default(autoincrement())

  authorId  Int
  content   String
  createdAt DateTime @default(now())

  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model ChannelMembership {
  permissionMask  Int @default(1) //1(simple member), 2(Administrator) or 4(owner)
  membershipState Int @default(1) //1 (ok), 2 (mute), 4 (ban)

  channelName String

  userId    Int
  channelId Int
  user      User    @relation(fields: [userId], references: [id])
  channel   Channel @relation(fields: [channelId], references: [id])

  @@id([userId, channelId])
}

model Channel {
  id Int @id @default(autoincrement())

  name       String @unique
  password   String?
  accessMask Int     @default(1) //1 (libre), 2 (invite), 4 (pwd)

  memberships ChannelMembership[]
  messages    Message[]

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id])
}

model Message {
  id Int @id @default(autoincrement())

  authorId  Int
  createdAt DateTime @default(now())

  content String

  channelId Int
  channel   Channel @relation(fields: [channelId], references: [id])
}

model FortyTwoUser {
  id Int @id

  accessToken String
  userId      Int?   @unique
  user        User?  @relation(references: [id], fields: [userId])
}

model UserAchievement {
  userId        Int
  achievementId Int
  createdAt     DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id])
  achievement Achievement @relation(fields: [achievementId], references: [id])

  @@id([userId, achievementId])
}

model Achievement {
  id Int @id @default(autoincrement())

  name        String
  description String
  difficulty  Int
  users       UserAchievement[]
}
