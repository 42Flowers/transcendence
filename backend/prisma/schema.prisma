// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// enum AuthenticationMethod {
  // Password
  // OAuth2
// }

model User {
  id Int @id @default(autoincrement())

  email         String  @unique
  emailVerified Boolean @default(false)

  password      String? @unique

  totpSecret    String? @unique
  totpEnabled   Boolean @default(false)

  authMethod    String

  experience Int @default(0)

  befriendedBy Friends[] @relation("users")
  friends      Friends[] @relation("friends")
  messages     Message[]

  channelMemberships ChannelMembership[]

  // gameResults   GameResult[] @relation("players")

  ownedChannels Channel[] @relation("ownedChannels")

  ftUser FortyTwoUser?

  tickets Ticket[]

  @@map("users")
}

model Ticket {
  id             Int      @id @default(autoincrement())
  userId         Int
  issuedAt       DateTime @default(now())
  allowedMethods String

  user User @relation(fields: [userId], references: [id])
  emailCode EmailCode?

  @@map("tickets")
}

model EmailCode {
  code    Int @id
  ticketId Int @unique
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("email_codes")
}

model Friends {
  userId    Int
  friendId  Int
  createdAt DateTime @default(now())
  user      User     @relation("users", fields: [userId], references: [id])
  friend    User     @relation("friends", fields: [friendId], references: [id])

  @@id([userId, friendId])
  @@map("friends")
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])

  @@map("messages")
}

// enum ChannelVisibility {
// Private
// Public
// InvitationOnly
// }

model Channel {
  id         Int      @id @default(autoincrement())
  ownerId    Int?
  createdAt  DateTime @default(now())
  password   String?
  visibility String   @default("private")
  // visibility ChannelVisibility @default(Private)

  memberships ChannelMembership[]

  owner User? @relation("ownedChannels", fields: [ownerId], references: [id])

  @@map("channels")
}

model ChannelMembership {
  userId         Int
  channelId      Int
  joinedAt       DateTime @default(now())
  permissionMask Int

  user    User    @relation(fields: [userId], references: [id])
  channel Channel @relation(fields: [channelId], references: [id])

  @@id([userId, channelId])
  @@map("channels_memberships")
}

// enum PlayerSide {
// Left
// Right
// }

// model GameResult {
//   id Int @default(autoincrement()) @id
//   createdAt DateTime @default(now())

//   score Int
//   playerId Int
//   playerSide String // Either "left" or "right"

// }

model FortyTwoUser {
  id          Int    @id
  accessToken String
  userId      Int?   @unique
  user        User?  @relation(references: [id], fields: [userId])

  @@map("forty_two_users")
}
