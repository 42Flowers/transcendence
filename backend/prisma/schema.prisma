// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int          @id @default(autoincrement())

  pseudo               String       @unique
  email                String       @unique
  emailVerified        Boolean      @default(false)

  avatar               String?   /////////////////////////////////////////////////

  level                Int          @default(0)
  experience           Float        @default(0)

  befriendedBy         Friendship[] @relation("users")
  friends              Friendship[] @relation("friends")
  bannedBy	           Blocked[]    @relation("users")
  blocked	             Blocked[]    @relation("blocked")

  gameParticipation    GameParticipation[]

  userConversations    UserConversation[]

  channelMemberships   ChannelMembership[]
  ownedChannels        Channel[]

  ftUser               FortyTwoUser?

  achievements         UserAchievements[]
}

model Friendship {
  @@id([userId, friendId])

  status     Int      @default(0)   //0 sender   /1 receiver  /2 accepted /3 blocked

  userId     Int
  friendId   Int
  user       User      @relation("users", fields: [userId], references: [id])
  friend     User      @relation("friends", fields: [friendId], references: [id])
}

model Blocked {
	@@id([userId, blockedId])

	userId		 Int
	blockedId	 Int
	user       User		 @relation("users", fields: [userId], references: [id])
	blocked		 User		 @relation("blocked", fields: [blockedId], references: [id])
}

model GameParticipation {
  @@id([userId, gameId])

  opponentId    Int

  userId        Int
  gameId        Int
  user          User     @relation(fields: [userId], references: [id])
  game          Game     @relation(fields: [gameId], references: [id])
}

model Game {
  id                  Int     @id @default(autoincrement())

  winnerScore         Int
  looserScore         Int
  winnerId            Int
  looserId            Int
  gameParticipations  GameParticipation[]
}

model UserConversation {
  @@id([userId, conversationId])

  receiverId        Int

  userId            Int
  conversationId    Int
  user              User             @relation(fields: [userId], references: [id])
  conversation      Conversation     @relation(fields: [conversationId], references: [id])
}

model Conversation {
	id           Int      @id    @default(autoincrement())

  messages     PrivateMessages[]
  users        UserConversation[]
}

model PrivateMessages {
  id            Int       @id   @default(autoincrement())

  authorId      Int
  content       String
  creationTime  DateTime

  conversationId   Int
  conversation     Conversation @relation(fields: [conversationId], references: [id])
}

model ChannelMembership {
  @@id([userId, channelId])

  permissionMask   Int //1(simple member), 2(Administrator) or 4(owner)
  membershipState  Int //1 (ok), 2 (mute), 4 (ban)

  channelName      String   @unique

  userId           Int
  channelId        Int
  user             User    @relation(fields: [userId], references: [id])
  channel          Channel @relation(fields: [channelId], references: [id])
}

model Channel {
  id         Int      @id @default(autoincrement())

  name	     String
  password   String?
  accessMask Int @default(0) //0 (libre), 1 (invite), 2 (pwd)

  memberships ChannelMembership[]
  messages    Message[]

  ownerId   Int
  owner     User @relation(fields: [ownerId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())

  authorId   Int
  createdAt  DateTime @default(now())

  content    String

  channelId  Int
  channel    Channel   @relation(fields: [channelId], references: [id])
}

model FortyTwoUser {
  id           Int    @id

  accessToken  String
  userId       Int?   @unique
  user         User?  @relation(references: [id], fields: [userId])
}

model UserAchievements {
  @@id([userId, achievementId])

  userId Int
  achievementId Int
  createdAt    DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id])
  achievement Achievement @relation(fields: [achievementId], references: [id])
}

model Achievement {
  id           Int @id @default(autoincrement())

  name         String
  description  String
  difficulty   Int
  users        UserAchievements[]
}
